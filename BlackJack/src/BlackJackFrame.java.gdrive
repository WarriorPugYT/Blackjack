
import java.util.Random;
import javax.swing.ImageIcon;

public class BlackJackFrame extends javax.swing.JFrame {

    BlackJackHand dH = new BlackJackHand(); //Dealer's hand
    BlackJackHand pH = new BlackJackHand(); //Player's hand
    BlackJackHand sH = new BlackJackHand(); //Split hand
    int chips = 5000; //Starting Chip Amount
    boolean active; //Hand in progress
    boolean split; //Is the hand split?

    Random r = new Random();
    int p1, p2, p3, p4, p5, p6, p7;  //player's card ranks
    int d1, d2, d3, d4, d5, d6, d7;  //dealer's card ranks
    int s1, s2, s3, s4, s5, s6, s7;  //Split card ranks
    ImageIcon[][] cards = new ImageIcon[4][14];  //suit then rank
    ImageIcon back = new ImageIcon(ClassLoader.getSystemResource("images/b2fv.gif"));  //Use this for the back of a card!
    //p1LBL.setIcon(back);    
    //postcondition: read the card images in from disk into memory

    public void loadCards() {
        //Load the Ace - 10
        for (int j = 0; j < 4; j++) {
            for (int i = 1; i <= 10; i++) {
                String name = "images/c";
                if (j == 0) {
                    name = "images/c";
                } else if (j == 1) {
                    name = "images/s";
                } else if (j == 2) {
                    name = "images/d";
                } else {
                    name = "images/h";
                }

                name = name + i + ".gif";
                
                cards[j][i] = new ImageIcon(ClassLoader.getSystemResource(name));

            }
            //Load the jack, queen and king
            cards[j][11] = new ImageIcon(ClassLoader.getSystemResource("images/cj.gif"));
            cards[j][12] = new ImageIcon(ClassLoader.getSystemResource("images/cq.gif"));
            cards[j][13] = new ImageIcon(ClassLoader.getSystemResource("images/ck.gif"));

        }

        //Finish the loadCards method!
    }

    public void hideBut() {
        //Hide these buttons by default
        splitBUT.setVisible(false);
        hit2BUT.setVisible(false);
        hitBUT.setVisible(false);
        stayBUT.setVisible(false);
        nextBUT.setVisible(false);
    }

    public int dealCard() {
        int cardVal = r.nextInt(1, 14);
        return cardVal;
    }

    //PostCondition: randomly returns a number from 1-13 where 1==Ace, 2==2, 11==Jack
    //12==Queen, 13== King
    /*public int dealNumber()
     {

     }
     //PostCondition: randomly returns 0-3 which represents the suit*/
    public int dealSuit() {
        return r.nextInt(0, 4);

    }

    /*
     //PostCondition: returns the sum of the cards for a specified player
     //if who == 0, then return sum of dealer cards
     //if who == 1, then return sum of player1 cards
     public int sumCards(int who)
     {





     }*/
    /**
     * Creates new form BlackJackFrame
     */
    public BlackJackFrame() {
        initComponents();
        hideBut();
        countLBL.setText("Chip Count: " + chips + "/" + chipsPB.getMaximum());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLBL = new javax.swing.JLabel();
        p7LBL = new javax.swing.JLabel();
        d1LBL = new javax.swing.JLabel();
        d2LBL = new javax.swing.JLabel();
        d4LBL = new javax.swing.JLabel();
        d6LBL = new javax.swing.JLabel();
        p1LBL = new javax.swing.JLabel();
        p2LBL = new javax.swing.JLabel();
        p3LBL = new javax.swing.JLabel();
        p4LBL = new javax.swing.JLabel();
        chipsPB = new javax.swing.JProgressBar();
        endLBL = new javax.swing.JLabel();
        betLBL = new javax.swing.JLabel();
        betPB = new javax.swing.JProgressBar();
        dealerLBL = new javax.swing.JLabel();
        playerLBL = new javax.swing.JLabel();
        splitBUT = new javax.swing.JButton();
        hitBUT = new javax.swing.JButton();
        stayBUT = new javax.swing.JButton();
        nextBUT = new javax.swing.JButton();
        p5LBL = new javax.swing.JLabel();
        p6LBL = new javax.swing.JLabel();
        s7LBL = new javax.swing.JLabel();
        s1LBL = new javax.swing.JLabel();
        s2LBL = new javax.swing.JLabel();
        s3LBL = new javax.swing.JLabel();
        s4LBL = new javax.swing.JLabel();
        s5LBL = new javax.swing.JLabel();
        s6LBL = new javax.swing.JLabel();
        d5LBL = new javax.swing.JLabel();
        d7LBL = new javax.swing.JLabel();
        d3LBL = new javax.swing.JLabel();
        chipsLBL1 = new javax.swing.JLabel();
        betBUT = new javax.swing.JButton();
        hit2BUT = new javax.swing.JButton();
        betTF = new javax.swing.JTextField();
        statusLBL = new javax.swing.JLabel();
        countLBL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        titleLBL.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        titleLBL.setText("Welcome to Black Jack!!");
        getContentPane().add(titleLBL);
        titleLBL.setBounds(120, 0, 440, 60);

        p7LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p7LBL.setOpaque(true);
        getContentPane().add(p7LBL);
        p7LBL.setBounds(560, 300, 70, 96);

        d1LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        d1LBL.setOpaque(true);
        getContentPane().add(d1LBL);
        d1LBL.setBounds(20, 120, 71, 96);

        d2LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        d2LBL.setOpaque(true);
        getContentPane().add(d2LBL);
        d2LBL.setBounds(110, 120, 71, 96);

        d4LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        d4LBL.setOpaque(true);
        getContentPane().add(d4LBL);
        d4LBL.setBounds(290, 120, 71, 96);

        d6LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        d6LBL.setOpaque(true);
        getContentPane().add(d6LBL);
        d6LBL.setBounds(470, 120, 71, 96);

        p1LBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        p1LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p1LBL.setOpaque(true);
        getContentPane().add(p1LBL);
        p1LBL.setBounds(30, 300, 70, 96);

        p2LBL.setToolTipText("");
        p2LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p2LBL.setOpaque(true);
        getContentPane().add(p2LBL);
        p2LBL.setBounds(120, 300, 70, 96);

        p3LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p3LBL.setOpaque(true);
        getContentPane().add(p3LBL);
        p3LBL.setBounds(210, 300, 70, 96);

        p4LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p4LBL.setOpaque(true);
        getContentPane().add(p4LBL);
        p4LBL.setBounds(300, 300, 70, 96);

        chipsPB.setForeground(new java.awt.Color(102, 204, 255));
        chipsPB.setMaximum(10000);
        chipsPB.setValue(5000);
        getContentPane().add(chipsPB);
        chipsPB.setBounds(660, 130, 450, 40);

        endLBL.setFont(new java.awt.Font("Rockwell", 1, 48)); // NOI18N
        endLBL.setForeground(new java.awt.Color(255, 102, 0));
        endLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(endLBL);
        endLBL.setBounds(20, 180, 590, 130);

        betLBL.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        betLBL.setText("Bet");
        getContentPane().add(betLBL);
        betLBL.setBounds(660, 200, 440, 60);

        betPB.setForeground(new java.awt.Color(0, 204, 51));
        betPB.setMaximum(10000);
        betPB.setValue(5000);
        getContentPane().add(betPB);
        betPB.setBounds(660, 260, 450, 40);

        dealerLBL.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        dealerLBL.setText("Dealer");
        getContentPane().add(dealerLBL);
        dealerLBL.setBounds(240, 50, 130, 60);

        playerLBL.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        playerLBL.setText("Player");
        getContentPane().add(playerLBL);
        playerLBL.setBounds(240, 220, 130, 60);

        splitBUT.setBackground(new java.awt.Color(255, 153, 0));
        splitBUT.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        splitBUT.setText("Split?");
        splitBUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitBUTActionPerformed(evt);
            }
        });
        getContentPane().add(splitBUT);
        splitBUT.setBounds(660, 410, 140, 40);

        hitBUT.setBackground(new java.awt.Color(255, 51, 0));
        hitBUT.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        hitBUT.setText("Hit");
        hitBUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hitBUTActionPerformed(evt);
            }
        });
        getContentPane().add(hitBUT);
        hitBUT.setBounds(820, 350, 140, 40);

        stayBUT.setBackground(new java.awt.Color(255, 153, 255));
        stayBUT.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        stayBUT.setText("Stay");
        stayBUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stayBUTActionPerformed(evt);
            }
        });
        getContentPane().add(stayBUT);
        stayBUT.setBounds(980, 350, 140, 40);

        nextBUT.setBackground(new java.awt.Color(102, 153, 0));
        nextBUT.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        nextBUT.setText("Next Hand");
        nextBUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBUTActionPerformed(evt);
            }
        });
        getContentPane().add(nextBUT);
        nextBUT.setBounds(820, 410, 140, 40);

        p5LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p5LBL.setOpaque(true);
        getContentPane().add(p5LBL);
        p5LBL.setBounds(390, 300, 70, 96);

        p6LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p6LBL.setOpaque(true);
        getContentPane().add(p6LBL);
        p6LBL.setBounds(480, 300, 70, 96);

        s7LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        s7LBL.setOpaque(true);
        getContentPane().add(s7LBL);
        s7LBL.setBounds(560, 420, 70, 96);

        s1LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        s1LBL.setOpaque(true);
        getContentPane().add(s1LBL);
        s1LBL.setBounds(30, 420, 70, 96);

        s2LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        s2LBL.setOpaque(true);
        getContentPane().add(s2LBL);
        s2LBL.setBounds(120, 420, 70, 96);

        s3LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        s3LBL.setOpaque(true);
        getContentPane().add(s3LBL);
        s3LBL.setBounds(210, 420, 70, 96);

        s4LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        s4LBL.setOpaque(true);
        getContentPane().add(s4LBL);
        s4LBL.setBounds(300, 420, 70, 96);

        s5LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        s5LBL.setOpaque(true);
        getContentPane().add(s5LBL);
        s5LBL.setBounds(390, 420, 70, 96);

        s6LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        s6LBL.setOpaque(true);
        getContentPane().add(s6LBL);
        s6LBL.setBounds(480, 420, 70, 96);

        d5LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        d5LBL.setOpaque(true);
        getContentPane().add(d5LBL);
        d5LBL.setBounds(380, 120, 71, 96);

        d7LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        d7LBL.setOpaque(true);
        getContentPane().add(d7LBL);
        d7LBL.setBounds(570, 120, 71, 96);

        d3LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        d3LBL.setOpaque(true);
        getContentPane().add(d3LBL);
        d3LBL.setBounds(200, 120, 71, 96);

        chipsLBL1.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        chipsLBL1.setText("Chips");
        getContentPane().add(chipsLBL1);
        chipsLBL1.setBounds(660, 70, 440, 60);

        betBUT.setBackground(new java.awt.Color(255, 153, 0));
        betBUT.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        betBUT.setText("Bet Ready");
        betBUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betBUTActionPerformed(evt);
            }
        });
        getContentPane().add(betBUT);
        betBUT.setBounds(660, 350, 140, 40);

        hit2BUT.setBackground(new java.awt.Color(255, 51, 0));
        hit2BUT.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        hit2BUT.setText("Hit");
        hit2BUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hit2BUTActionPerformed(evt);
            }
        });
        getContentPane().add(hit2BUT);
        hit2BUT.setBounds(660, 410, 140, 40);
        getContentPane().add(betTF);
        betTF.setBounds(660, 310, 140, 30);

        statusLBL.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        getContentPane().add(statusLBL);
        statusLBL.setBounds(660, 460, 480, 90);

        countLBL.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        countLBL.setText("Chip Count:");
        getContentPane().add(countLBL);
        countLBL.setBounds(660, 180, 180, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void loss() {
        //You lost
        chips -= betPB.getValue();

        chipsPB.setValue(chips);
        countLBL.setText("Chip Count: " + chips + "/" + chipsPB.getMaximum());
        stayBUT.setVisible(false);
        hitBUT.setVisible(false);
        hit2BUT.setVisible(false);
        splitBUT.setVisible(false);
        if (chips == 0) {
            statusLBL.setText("You are bankrupt!");
            endLBL.setText("YOU LOST!");
            endLBL.setVisible(true);
        } else {
            showBut();
        }

    }

    public void win() {
        //You won
        chips += betPB.getValue();

        chipsPB.setValue(chips);
        countLBL.setText("Chip Count: " + chips + "/" + chipsPB.getMaximum());
        stayBUT.setVisible(false);
        hitBUT.setVisible(false);
        hit2BUT.setVisible(false);
        splitBUT.setVisible(false);

        if (chips == chipsPB.getMaximum()) {
            statusLBL.setText("You took all the house's money!");
            endLBL.setText("YOU WON!");
            endLBL.setVisible(true);
        } else {
            showBut();
        }
    }

    public String validate(int bet) {
        if (bet > chips || bet <= 0) {
            return "invalid";
        } else if (bet + chips > chipsPB.getMaximum()) {
            return "invalid";
        } else {
            return "valid";
        }
    }

    public void clearDeck() {
        split = false;
        sH.clearHand();
        dH.clearHand();
        pH.clearHand();
        for (int i = 1; i < 8; i++) { //Clear all card holders
            if (i == 1) {
                p1LBL.setIcon(null);
                d1LBL.setIcon(null);
                s1LBL.setIcon(null);
            } else if (i == 2) {
                p2LBL.setIcon(null);
                d2LBL.setIcon(null);
                s2LBL.setIcon(null);
            } else if (i == 3) {
                p3LBL.setIcon(null);
                d3LBL.setIcon(null);
                s3LBL.setIcon(null);
            } else if (i == 4) {
                d4LBL.setIcon(null);
                p4LBL.setIcon(null);
                s4LBL.setIcon(null);
            } else if (i == 5) {
                p5LBL.setIcon(null);
                d5LBL.setIcon(null);
                s5LBL.setIcon(null);
            } else if (i == 6) {
                p6LBL.setIcon(null);
                d6LBL.setIcon(null);
                s6LBL.setIcon(null);
            } else if (i == 7) {
                p7LBL.setIcon(null);
                d7LBL.setIcon(null);
                s7LBL.setIcon(null);
            }
        }
    }

    public void showBut() {

        betBUT.setVisible(true);
        betTF.setVisible(true);
    }
    private void nextBUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBUTActionPerformed
        // TODO add your handling code here:

        splitBUT.setVisible(false);
        nextBUT.setVisible(false);
        stayBUT.setVisible(true);
        hitBUT.setVisible(true);
        active = true;
        statusLBL.setText("");
        clearDeck();
        int cardNum = 1;
        for (int i = 0; i < 2; i++) {

            int cardVal = dealCard();

           
            pH.addCard(cardVal);
            cardNum++;

        }
        for (int i = 0; i < 2; i++) {

            int cardVal = dealCard();
            
            dH.addCard(cardVal);
            cardNum++;

        }
        d1LBL.setIcon(cards[dealSuit()][dH.getCardVal(0)]);
        //d2LBL.setIcon(cards[1][dH.getCardVal(1)]);
        d2LBL.setIcon(back);
        p1LBL.setIcon(cards[dealSuit()][pH.getCardVal(0)]);//pH.getCardVal(0)]);

        p2LBL.setIcon(cards[dealSuit()][pH.getCardVal(1)]);
        if (pH.getCardVal(0) == pH.getCardVal(1)) {
            //Give option to split
            splitBUT.setVisible(true);
        }

    }//GEN-LAST:event_nextBUTActionPerformed

    private void hitBUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hitBUTActionPerformed
        // TODO add your handling code here:
        if (active == true) {
            if (pH.getHandVal() == 21) { //If first two are blackjack, player can't hit
                hitBUT.setVisible(false);
            }
            int cardVal = dealCard();
            pH.addCard(cardVal);
            int cardNum = pH.getCardNum();
            //Display card icons in correct slots
            if (cardNum == 2) {
                p2LBL.setIcon(cards[dealSuit()][pH.getCardVal(1)]);
            } else if (cardNum == 3) {
                p3LBL.setIcon(cards[dealSuit()][pH.getCardVal(2)]);
            } else if (cardNum == 4) {
                p4LBL.setIcon(cards[dealSuit()][pH.getCardVal(3)]);
            } else if (cardNum == 5) {
                p5LBL.setIcon(cards[dealSuit()][pH.getCardVal(4)]);
            } else if (cardNum == 6) {
                p6LBL.setIcon(cards[dealSuit()][pH.getCardVal(5)]);
            } else if (cardNum == 7) {
                p7LBL.setIcon(cards[dealSuit()][pH.getCardVal(6)]);
            }
        }
        if (pH.getHandVal() == 21) { //Player at 21, don't hit anymore
            hitBUT.setVisible(false);
        }
        if (pH.getHandVal() > 21) { //Stop hand 1 if bust
            hitBUT.setVisible(false);
            if (split == false) {
                active = false;
                statusLBL.setText("You Busted!");
                loss();
            }
        }
    }//GEN-LAST:event_hitBUTActionPerformed

    private void splitBUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitBUTActionPerformed
        // TODO add your handling code here:
        split = true;
        hit2BUT.setVisible(true);

        splitBUT.setVisible(false);
        sH.addCard(pH.getCardVal(1));
        pH.remCard(1);
        s1LBL.setIcon(p2LBL.getIcon());
        p2LBL.setIcon(null);

    }//GEN-LAST:event_splitBUTActionPerformed

    private void stayBUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stayBUTActionPerformed
        int handVal = pH.getHandVal();
        int dealerHand = dH.getHandVal();
        int splitVal = sH.getHandVal();
        d2LBL.setIcon(cards[dealSuit()][dH.getCardVal(1)]);
        if (split == false) {
            if (handVal > 21) {
                statusLBL.setText("You Busted!");
                loss();
            } else if (handVal < dealerHand) {
                if (dealerHand <= 21) {
                    statusLBL.setText("You Lost! " + handVal + " vs " + dealerHand);
                    loss();
                } else {
                    statusLBL.setText("You Win! Dealer Busted!");
                    win();
                }
            } else {
                while (dealerHand < 17 && dealerHand < handVal) {
                    int newCard = dealCard();
                    int suit = dealSuit();
                    dH.addCard(newCard);
                    int cardNum = dH.getCardNum();
                    dealerHand = dH.getHandVal();

                    if (cardNum == 3) {

                        d3LBL.setIcon(cards[dealSuit()][dH.getCardVal(2)]);
                    } else if (cardNum == 4) {
                        d4LBL.setIcon(cards[dealSuit()][dH.getCardVal(3)]);

                    } else if (cardNum == 5) {

                        d5LBL.setIcon(cards[dealSuit()][dH.getCardVal(4)]);
                    } else if (cardNum == 6) {

                        d6LBL.setIcon(cards[dealSuit()][dH.getCardVal(5)]);
                    } else if (cardNum == 7) {

                        d7LBL.setIcon(cards[dealSuit()][dH.getCardVal(6)]);
                    }
                }
                if (handVal > dealerHand) {
                    statusLBL.setText("You Win! " + handVal + " vs " + dealerHand);
                    win();
                } else if (handVal == dealerHand) {
                    statusLBL.setText("Push! Everyone's a loser!");
                    loss();
                } else if (dealerHand > 21) {
                    statusLBL.setText("You Win! Dealer Busted!");
                    win();
                } else if (handVal < dealerHand) {
                    statusLBL.setText("You Lose! " + handVal + " vs " + dealerHand);
                    loss();
                }
            }
        } else {
            if (handVal > 21 && splitVal > 21) {
                statusLBL.setText("You Busted on Both!");
                loss();
            } else if (handVal < dealerHand && splitVal < dealerHand) {
                if (dealerHand <= 21) {
                    statusLBL.setText("You Lost! Both hands are lower!");
                    loss();
                } else {
                    statusLBL.setText("You Win! Dealer Busted!");
                    win();
                }
            } else {
                while (dealerHand < 17 && dealerHand < handVal && dealerHand < splitVal) {
                    int newCard = dealCard();
                    int suit = dealSuit();
                    dH.addCard(newCard);
                    int cardNum = dH.getCardNum();
                    dealerHand = dH.getHandVal();

                    if (cardNum == 3) {

                        d3LBL.setIcon(cards[dealSuit()][dH.getCardVal(2)]);
                    } else if (cardNum == 4) {
                        d4LBL.setIcon(cards[dealSuit()][dH.getCardVal(3)]);

                    } else if (cardNum == 5) {

                        d5LBL.setIcon(cards[dealSuit()][dH.getCardVal(4)]);
                    } else if (cardNum == 6) {

                        d6LBL.setIcon(cards[dealSuit()][dH.getCardVal(5)]);
                    } else if (cardNum == 7) {

                        d7LBL.setIcon(cards[dealSuit()][dH.getCardVal(6)]);
                    }
                }
                if (handVal > dealerHand || splitVal > dealerHand) {
                    statusLBL.setText("You Win!");
                    win();
                } else if (handVal == dealerHand || splitVal == dealerHand) {
                    statusLBL.setText("Push!");
                    loss();
                } else if (dealerHand > 21) {
                    statusLBL.setText("You Win! Dealer Busted!");
                    win();
                } else if (handVal < dealerHand && splitVal < dealerHand) {
                    statusLBL.setText("Hand 1 Lost! " + handVal + " vs " + dealerHand);
                    loss();
                }
            }
        }

        // TODO add your handling code here:
        active = false;
    }//GEN-LAST:event_stayBUTActionPerformed

    private void betBUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betBUTActionPerformed
        int amtBet = Integer.valueOf(betTF.getText());
        statusLBL.setText("");
        if (validate(amtBet).equals("valid")) { //Make sure they're not cheating
            betBUT.setVisible(false);
            betTF.setVisible(false);
            nextBUT.setVisible(true);

            betPB.setValue(amtBet);
        } else {

            statusLBL.setText("Invalid Bet!");
        }


    }//GEN-LAST:event_betBUTActionPerformed

    private void hit2BUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hit2BUTActionPerformed
        // TODO add your handling code here:
        if (active == true && sH.getHandVal() != 21) {
            if (sH.getHandVal() == 21) {
                hit2BUT.setVisible(false);
            }
            int cardVal = dealCard();
            sH.addCard(cardVal);
            int cardNum = sH.getCardNum();
            //Displayy card icons in correct slots
            if (cardNum == 2) {
                s2LBL.setIcon(cards[dealSuit()][sH.getCardVal(1)]);
            } else if (cardNum == 3) {
                s3LBL.setIcon(cards[dealSuit()][sH.getCardVal(2)]);
            } else if (cardNum == 4) {
                s4LBL.setIcon(cards[dealSuit()][sH.getCardVal(3)]);
            } else if (cardNum == 5) {
                s5LBL.setIcon(cards[dealSuit()][sH.getCardVal(4)]);
            } else if (cardNum == 6) {
                s6LBL.setIcon(cards[dealSuit()][sH.getCardVal(5)]);
            } else if (cardNum == 7) {
                s7LBL.setIcon(cards[dealSuit()][sH.getCardVal(6)]);
            }
            if (sH.getHandVal() == 21) {
                hit2BUT.setVisible(false);
            }
            if (sH.getHandVal() > 21) { //Stop hand 1 if bust
                hit2BUT.setVisible(false);
                if (pH.getHandVal() > 21) {
                    active = false;
                    statusLBL.setText("You Busted!");
                    loss();
                }
            }
        }
    }//GEN-LAST:event_hit2BUTActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton betBUT;
    private javax.swing.JLabel betLBL;
    private javax.swing.JProgressBar betPB;
    private javax.swing.JTextField betTF;
    private javax.swing.JLabel chipsLBL1;
    private javax.swing.JProgressBar chipsPB;
    private javax.swing.JLabel countLBL;
    private javax.swing.JLabel d1LBL;
    private javax.swing.JLabel d2LBL;
    private javax.swing.JLabel d3LBL;
    private javax.swing.JLabel d4LBL;
    private javax.swing.JLabel d5LBL;
    private javax.swing.JLabel d6LBL;
    private javax.swing.JLabel d7LBL;
    private javax.swing.JLabel dealerLBL;
    private javax.swing.JLabel endLBL;
    private javax.swing.JButton hit2BUT;
    private javax.swing.JButton hitBUT;
    private javax.swing.JButton nextBUT;
    private javax.swing.JLabel p1LBL;
    private javax.swing.JLabel p2LBL;
    private javax.swing.JLabel p3LBL;
    private javax.swing.JLabel p4LBL;
    private javax.swing.JLabel p5LBL;
    private javax.swing.JLabel p6LBL;
    private javax.swing.JLabel p7LBL;
    private javax.swing.JLabel playerLBL;
    private javax.swing.JLabel s1LBL;
    private javax.swing.JLabel s2LBL;
    private javax.swing.JLabel s3LBL;
    private javax.swing.JLabel s4LBL;
    private javax.swing.JLabel s5LBL;
    private javax.swing.JLabel s6LBL;
    private javax.swing.JLabel s7LBL;
    private javax.swing.JButton splitBUT;
    private javax.swing.JLabel statusLBL;
    private javax.swing.JButton stayBUT;
    private javax.swing.JLabel titleLBL;
    // End of variables declaration//GEN-END:variables
}
